* [[file:main-flow.org][Data Relational Mapping]]

* Model Definitions

** Rules and assumptions

   * A model's definition must only depend on the field types and any validators. These constraints should prevent any need for circular dependancies in the models themselves.
   * A type (or fn) that implements a known interface is used as the `:type` value. This allows custom type behavior (like implementing new relationships or serializing types
     to something suitable for the database). (N.B.: Types may require an interface or map of fns to implement a default validator/options selector)
   * Each field may have only one validator function that receives the value of that field.
   * Each model may have only one validator function that receives the values of the model.
   * Validators do not mutate or transform. They only approve or deny values.
   * Models must be registered in some way so the DRM can find the data.
   * A model may specify the behavior of it's fk children upon it's deletion (perhaps also on update?) via the chosen fk type.

** Examples

   #+BEGIN_SRC python
     myModel = {
         "model": "myModel",
         "validator": tos_check,
         "fields": {
             "id": {
                 "name": "id",
                 "type": Integer
             }
             "name": {
                 "name": "name",
                 "type": String,
                 "validator": max_length(100)
             }
             "user-id": {
                 "name": "user-id",
                 "type": OneToOne,
                 "model": "user",
                 "foreign-key": "id"
             }
             "tos": {
                 "name": "tos",
                 "type": Boolean
             }
         }
     }

   #+END_SRC

*** TODO Both validator functions should be imported from a validators example because they aren't meant to live with the model definition
